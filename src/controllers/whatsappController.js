import twilio from 'twilio';
import { getState, setState, clearState, saveMessage, updateUserData } from '../services/stateService.js';

const MessagingResponse = twilio.twiml.MessagingResponse;
const cedulaRegex = /^\d{6,10}$/;

// Regex simple para "direcci√≥n": al menos 10 caracteres, alfanum√©ricos y espacios
const direccionRegex = /^[a-zA-Z0-9\s,.-]{10,}$/;

export async function handleIncoming(req, res) {
  try {
    const from = req.body.From || '';
    const body = (req.body.Body || '').trim();
    const message = body.toLowerCase();

    console.log('Incoming:', from, body);
    await saveMessage(from, 'in', body);

    const twiml = new MessagingResponse();
    const state = await getState(from);

    // üí¨ Inicio de conversaci√≥n
    if (["hola", "buenas", "saludos"].includes(message)) {
      await setState(from, 'menu', {});
      twiml.message(
        "üëã ¬°Saludos!\nEs un gusto poder ayudarle. Por favor ind√≠queme el requerimiento que desea realizar:\n\n1Ô∏è‚É£ Condonaci√≥n de deuda\n2Ô∏è‚É£ Cambio de operadora\n3Ô∏è‚É£ Servicio de hogar"
      );

    // üìù Opci√≥n 1: Condonaci√≥n de deuda
    } else if (message === "1" || state === 'cedula') {
      if (message === "1") {
        await setState(from, 'cedula', {});
        twiml.message("‚úÖ Por favor env√≠e el n√∫mero de c√©dula que desea consultar.");
      } else if (cedulaRegex.test(body)) {
        // Guardar c√©dula en DB
        await updateUserData(from, { cedula: body });
        twiml.message("üîé Un momento por favor, estamos validando la informaci√≥n...");
        await saveMessage(from, 'out', 'Validando c√©dula...');
        await clearState(from);
      } else {
        twiml.message("‚ùå Eso no parece una c√©dula v√°lida. Por favor env√≠e un n√∫mero de c√©dula correcto (6 a 10 d√≠gitos).");
      }

    // üìù Opci√≥n 2: Cambio de operadora
    } else if (message === "2" || state === 'operador') {
      if (message === "2") {
        await setState(from, 'operador', {});
        twiml.message("üì± Ind√≠queme:\n- Operador actual\n- Si tiene un plan o va a hacer recarga");
      } else if (message.length > 3) {
        // Guardar operador en DB
        await updateUserData(from, { operador: body });
        twiml.message("üîç Gracias, estamos validando los datos del operador...");
        await saveMessage(from, 'out', 'Validando operador...');
        await clearState(from);
      } else {
        twiml.message("‚ùå No entend√≠ los datos del operador. Por favor env√≠e el nombre del operador y si tiene un plan o va a hacer recarga.");
      }

    // üìù Opci√≥n 3: Servicio de hogar
    } else if (message === "3" || state === 'direccion') {
      if (message === "3") {
        await setState(from, 'direccion', {});
        twiml.message("üè† Por favor env√≠e la direcci√≥n completa donde desea utilizar el servicio (calle, n√∫mero, ciudad).");
      } else if (direccionRegex.test(body)) {
        // Guardar direcci√≥n en DB
        await updateUserData(from, { direccion: body });
        twiml.message("üìç Gracias, la direcci√≥n ha sido recibida. En breve confirmaremos si podemos ofrecer el servicio en su zona.");
        await saveMessage(from, 'out', 'Direcci√≥n validada');
        await clearState(from);
      } else {
        twiml.message("‚ùå No reconoc√≠ la direcci√≥n. Por favor env√≠e la direcci√≥n completa incluyendo calle, n√∫mero y ciudad, m√≠nimo 10 caracteres.");
      }

    // ‚ùó Cualquier otro mensaje fuera de flujo
    } else {
      twiml.message(
        "‚ö†Ô∏è No entend√≠ su solicitud.\nPor favor, env√≠e una de las opciones v√°lidas:\n1Ô∏è‚É£ Condonaci√≥n de deuda\n2Ô∏è‚É£ Cambio de operadora\n3Ô∏è‚É£ Servicio de hogar"
      );
    }

    res.type('text/xml').send(twiml.toString());
  } catch (err) {
    console.error('Error webhook:', err);
    res.sendStatus(500);
  }
}
